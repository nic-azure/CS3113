1.

E15 and E20 are processed in order.
jumps are conditional and unconditional
similar opcodes
most instructions operate directly to registers

E15 and E20 can have multiple labels.

E20 instruction set is 16 bit, has more, larger registers, more opcodes, more complex encoding.
E20 has 3 different instruction set types, each has a different size
for the immediate value.

2a. 000 001 010 100 0100
Compares $1 and $2, setting $4 to 1 if $1 is less than
$2, if the comparison fails sets $4 to 0. 

2b. 010 0000000001111
Jumps to the label foobar at address 15 base 10.

2c. 111 000 001 0000001
Moves the value 1 to $1

2d. 101 001 000 0000000
Stores the value of $1 in a the memory address of $1+0.

3a. nop
Do nothing or no operation is performed then increment the program counter.

*3b. jeq $1 , $0 , 128

should be jeq $1, $0, some_label
Jump to the address line at 128 if the values in $1 and $0 are equal.

3c. lw $5, 31($2)
Calulate the memory address at $2+31 and save the value at that address
into $5.

4a. movi $5, 34
4b. add $3, $1, $2
4c. add $6, $5, $5
4d. slti $5, $4, 10
4e. j thymus
*4f. 
addi $1, $1, 50
jr $1

*4g.
slt $3, $2, $1
jeq $3, $0, destination
	
4h. lw $1, 9($0)
4i. lw $2, hyoid($0)
4j. sw $4, 0($3) -> lw $3, 0($4)
4k. 
slti $5, $4, 10 
sw $5, isless($0)
4l. 
lw $1, 29($0)
sw $1, 30($0)

5. $3 = 20 $4 = 70

6.
addi $1, $1, 1
add $2, $2, $2
halt

7.
lw $1, 20($0)
lw $2, 30($0)
add $3, $1, $2
sw $3, 40($0)
halt

